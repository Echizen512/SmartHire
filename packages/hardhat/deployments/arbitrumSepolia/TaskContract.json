{
  "address": "0x087c615C73E35805A5Ca7f111C78a3B7Ee992674",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "auditor",
          "type": "address"
        }
      ],
      "name": "AuditorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "TaskAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "UserAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "acceptTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auditorAddress",
          "type": "address"
        }
      ],
      "name": "addAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressUser",
          "type": "address"
        }
      ],
      "name": "addUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auditors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "auditorID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auditorAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "block",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auditorID",
          "type": "uint256"
        }
      ],
      "name": "blockAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_proof",
          "type": "string"
        }
      ],
      "name": "completedTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_rules",
          "type": "string"
        }
      ],
      "name": "createTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_rules",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_responsible",
          "type": "address"
        }
      ],
      "name": "createTaskWithResponsible",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAuditors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "auditorID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "auditorAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "block",
              "type": "bool"
            }
          ],
          "internalType": "struct TaskContract.Auditor[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "taskID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rules",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "responsible",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            }
          ],
          "internalType": "struct TaskContract.Task[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auditorAddress",
          "type": "address"
        }
      ],
      "name": "getAuditorForAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getCompletedTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "taskCompletedID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "taskID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "proof",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "verifier",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "verified",
              "type": "bool"
            }
          ],
          "internalType": "struct TaskContract.TaskCompleted",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksByResponsible",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "taskID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rules",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "responsible",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            }
          ],
          "internalType": "struct TaskContract.Task[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTasksWithoutResponsible",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "taskID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rules",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "responsible",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            }
          ],
          "internalType": "struct TaskContract.Task[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressUser",
          "type": "address"
        }
      ],
      "name": "getUserForAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tasks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rules",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "responsible",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auditorID",
          "type": "uint256"
        }
      ],
      "name": "unlockAuditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskCompletedID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_verified",
          "type": "bool"
        }
      ],
      "name": "verifiedTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c5e8b9652af4edaea677f5df56955824584b00352bb5f725aa0eb783ad8be1d",
  "receipt": {
    "to": null,
    "from": "0xD2692F9df925D18D527ABe8b3d99EE9E9C8d75AE",
    "contractAddress": "0x087c615C73E35805A5Ca7f111C78a3B7Ee992674",
    "transactionIndex": 6,
    "gasUsed": "3078092",
    "logsBloom": "0x
    "blockHash": "0x1d4781bfc0d1bfc2aea86786431ac32ad20fbd9b1c1c2cf630e8f82a5b4959cd",
    "transactionHash": "0x1c5e8b9652af4edaea677f5df56955824584b00352bb5f725aa0eb783ad8be1d",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 104862915,
        "transactionHash": "0x1c5e8b9652af4edaea677f5df56955824584b00352bb5f725aa0eb783ad8be1d",
        "address": "0x087c615C73E35805A5Ca7f111C78a3B7Ee992674",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2692f9df925d18d527abe8b3d99ee9e9c8d75ae",
          "0x000000000000000000000000d2692f9df925d18d527abe8b3d99ee9e9c8d75ae"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x1d4781bfc0d1bfc2aea86786431ac32ad20fbd9b1c1c2cf630e8f82a5b4959cd"
      }
    ],
    "blockNumber": 104862915,
    "cumulativeGasUsed": "4362760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD2692F9df925D18D527ABe8b3d99EE9E9C8d75AE"
  ],
  "numDeployments": 1,
  "solcInputHash": "8126cbd3a23457171243471380055486",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"AuditorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TaskAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"acceptTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auditorAddress\",\"type\":\"address\"}],\"name\":\"addAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auditors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auditorID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auditorAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"block\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auditorID\",\"type\":\"uint256\"}],\"name\":\"blockAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"completedTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_rules\",\"type\":\"string\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_rules\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_responsible\",\"type\":\"address\"}],\"name\":\"createTaskWithResponsible\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAuditors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auditorID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auditorAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"block\",\"type\":\"bool\"}],\"internalType\":\"struct TaskContract.Auditor[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"responsible\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"internalType\":\"struct TaskContract.Task[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auditorAddress\",\"type\":\"address\"}],\"name\":\"getAuditorForAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getCompletedTask\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"taskCompletedID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"internalType\":\"struct TaskContract.TaskCompleted\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksByResponsible\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"responsible\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"internalType\":\"struct TaskContract.Task[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTasksWithoutResponsible\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"responsible\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"internalType\":\"struct TaskContract.Task[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUser\",\"type\":\"address\"}],\"name\":\"getUserForAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rules\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"responsible\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auditorID\",\"type\":\"uint256\"}],\"name\":\"unlockAuditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskCompletedID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_verified\",\"type\":\"bool\"}],\"name\":\"verifiedTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptTask(uint256)\":{\"params\":{\"_taskID\":\"- The ID of the task to be accepted.\"}},\"addAuditor(address)\":{\"params\":{\"_auditorAddress\":\"- The address of the auditor to be added.\"}},\"addUser(address)\":{\"params\":{\"_addressUser\":\"- Address of the user to be added.\"}},\"blockAuditor(uint256)\":{\"params\":{\"_auditorID\":\"- The ID of the auditor to be blocked.\"}},\"completedTask(uint256,string)\":{\"params\":{\"_proof\":\"- The proof of task completion.\",\"_taskID\":\"- The ID of the task to mark as completed.\"}},\"createTask(string,string,string)\":{\"params\":{\"_description\":\"- A brief description of the task.\",\"_name\":\"- The name of the task.\",\"_rules\":\"- The rules and guidelines for the task.\"}},\"createTaskWithResponsible(string,string,string,address)\":{\"params\":{\"_description\":\"- A brief description of the task.\",\"_name\":\"- The name of the task.\",\"_responsible\":\"- The address responsible for the task.\",\"_rules\":\"- The rules and guidelines for the task.\"}},\"getAllAuditors()\":{\"returns\":{\"_0\":\"Auditor[] memory - An array containing all auditors.\"}},\"getAllTasks()\":{\"returns\":{\"_0\":\"Task[] memory - An array containing all tasks.\"}},\"getAllUsers()\":{\"returns\":{\"_0\":\"address[] memory - An array containing all user addresses.\"}},\"getAuditorForAddress(address)\":{\"params\":{\"_auditorAddress\":\"- The address to be checked.\"},\"returns\":{\"_0\":\"bool - True if the address is an auditor, false otherwise.\"}},\"getCompletedTask(uint256)\":{\"params\":{\"_taskID\":\"- The ID of the task to retrieve.\"},\"returns\":{\"_0\":\"TaskCompleted memory - The completed task corresponding to the given task ID.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTask(uint256)\":{\"params\":{\"_taskID\":\"- The ID of the task to retrieve.\"},\"returns\":{\"_0\":\"(string memory, string memory) - The name and description of the task.\"}},\"getTasksByResponsible()\":{\"returns\":{\"_0\":\"Task[] memory - An array containing tasks assigned to the caller.\"}},\"getTasksWithoutResponsible()\":{\"returns\":{\"_0\":\"Task[] memory - An array containing tasks without a responsible address.\"}},\"getUserForAddress(address)\":{\"params\":{\"_addressUser\":\"- The address to be checked.\"},\"returns\":{\"_0\":\"bool - True if the address is a user, false otherwise.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unlockAuditor(uint256)\":{\"params\":{\"_auditorID\":\"- The ID of the auditor to be unlocked.\"}},\"verifiedTask(uint256,bool)\":{\"params\":{\"_taskCompletedID\":\"- The ID of the completed task to verify.\",\"_verified\":\"- Boolean indicating whether the task is verified.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptTask(uint256)\":{\"notice\":\"Allows a user to accept a task by assigning themselves as the responsible party. Ensures that the sender is not the admin, the task exists, the task has no assigned responsible, and the sender is not an auditor. If the sender is not already a user, assigns the user role to the sender and adds them to the users list. Updates the task to mark the sender as the responsible party.\"},\"addAuditor(address)\":{\"notice\":\"Adds a new auditor to the system. Ensures the provided auditor address is valid and not already assigned as an admin, auditor, or user. Creates a new Auditor object and assigns the AUDITOR_ROLE to the given address. Increments the auditorID and emits an event to signal that a new auditor has been added.\"},\"addUser(address)\":{\"notice\":\"Adds a new user to the system. Checks various conditions including whether the address is valid, if the sender has the required role, and if the address is not already assigned. If all conditions are met, grants the user role to the address and emits an event.\"},\"blockAuditor(uint256)\":{\"notice\":\"Blocks an auditor by setting their block status to true and revoking their auditor role. Ensures the auditor exists by checking if their address is not the zero address. Updates the auditor's block status and revokes their AUDITOR_ROLE.\"},\"completedTask(uint256,string)\":{\"notice\":\"Marks a task as completed by providing proof. Ensures the caller has the USER_ROLE and validates that the task exists and the proof is not empty. Checks if the task has already been completed; if not, it records the completion.\"},\"createTask(string,string,string)\":{\"notice\":\"Creates a new task with the given name, description, and rules. Ensures the provided name, description, and rules are not empty and that a reward is provided. Stores the task in the tasks mapping with a unique taskID and initializes task properties. Emits a TaskAdded event to signal that a new task has been created.\"},\"createTaskWithResponsible(string,string,string,address)\":{\"notice\":\"Creates a new task with the specified name, description, rules, and responsible address. Ensures the provided name, description, and rules are not empty. Validates that a reward is provided and that the responsible address is not an admin or auditor. Assigns the task to the responsible address, granting the user role if not already assigned. Emits events to signal the addition of the user (if new) and the task.\"},\"getAllAuditors()\":{\"notice\":\"Retrieves a list of all auditors. Creates a new array with the length equal to the number of auditors (auditorID). Iterates over the auditors mapping to populate the array with auditor details. Returns the array of auditors.\"},\"getAllTasks()\":{\"notice\":\"Retrieves a list of all tasks. Ensures the caller has either the default admin role or the auditor role. Creates a new array with the length equal to the number of tasks. Iterates over the tasks mapping to populate the array with task details.\"},\"getAllUsers()\":{\"notice\":\"Retrieves a list of all user addresses. Creates a new array with the length equal to the current number of users (userID). Iterates over the users mapping to populate the array with user addresses. Returns the array of user addresses.\"},\"getAuditorForAddress(address)\":{\"notice\":\"Checks if a given address is associated with an auditor. Iterates through the auditors mapping to see if the address matches any existing auditor addresses. Returns true if a match is found; otherwise, returns false.\"},\"getCompletedTask(uint256)\":{\"notice\":\"Retrieves a completed task by its task ID. Iterates through the tasksCompleted mapping to find the task with the matching task ID. Returns the completed task if found, otherwise returns a default TaskCompleted object.\"},\"getTask(uint256)\":{\"notice\":\"Retrieves the name and description of a task by its ID. Accesses the task from the tasks mapping using the provided task ID. Returns the task's name and description.\"},\"getTasksByResponsible()\":{\"notice\":\"Retrieves all tasks assigned to the caller. Ensures the caller has the USER_ROLE and the sender address is not the zero address. Counts the number of tasks assigned to the caller. Creates an array to store these tasks. Iterates over the tasks mapping to populate the array with tasks assigned to the caller.\"},\"getTasksWithoutResponsible()\":{\"notice\":\"Retrieves a list of tasks that do not have an assigned responsible address. Iterates through the tasks mapping to count the number of tasks without a responsible address. Creates an array to store these tasks. Populates the array with tasks that have no responsible address. Returns the array of tasks without a responsible address.\"},\"getUserForAddress(address)\":{\"notice\":\"Checks if a given address is associated with any user. Validates that the provided address is not the zero address. Iterates through the user mapping to see if the address matches any existing user addresses. Returns true if a match is found; otherwise, returns false.\"},\"unlockAuditor(uint256)\":{\"notice\":\"Unlocks an auditor by setting their block status to false and re-granting their auditor role. Ensures the auditor exists by checking if their address is not the zero address. Updates the auditor's block status and grants them the AUDITOR_ROLE again.\"},\"verifiedTask(uint256,bool)\":{\"notice\":\"Verifies a completed task. Checks if the sender has either the default admin role or the auditor role. Ensures the proof is provided and the task exists. If verified, assigns the verifier and transfers the reward to the responsible. If not verified, releases the task for reassignment.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TaskContract.sol\":\"TaskContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/TaskContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\"; //Contract AccessControl by OpenZeppelin\\r\\n\\r\\ncontract TaskContract is AccessControl {\\r\\n    //Roles for AccessControl\\r\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\r\\n    bytes32 public constant USER_ROLE = keccak256(\\\"USER_ROLE\\\");\\r\\n\\r\\n    uint256 public taskID = 0;\\r\\n    uint256 auditorID = 0;\\r\\n    uint256 userID = 0;\\r\\n    uint256 taskCompletedID = 0;\\r\\n    address public admin;\\r\\n\\r\\n    struct Task {\\r\\n        uint256 taskID;\\r\\n        string name;\\r\\n        string description;\\r\\n        string rules;\\r\\n        uint256 reward;\\r\\n        address payable responsible;\\r\\n        bool completed;\\r\\n    }\\r\\n\\r\\n    struct Auditor {\\r\\n        uint256 auditorID;\\r\\n        address auditorAddress;\\r\\n        bool block;\\r\\n    }\\r\\n\\r\\n    struct TaskCompleted {\\r\\n        uint256 taskCompletedID;\\r\\n        uint256 taskID;\\r\\n        string proof;\\r\\n        address verifier;\\r\\n        bool verified;\\r\\n    }\\r\\n\\r\\n    //mappings\\r\\n    mapping(uint256 => Task) public tasks;\\r\\n    mapping(uint256 => Auditor) public auditors;\\r\\n    mapping(uint256 => address) public users;\\r\\n    mapping(uint256 => TaskCompleted) tasksCompleted;\\r\\n\\r\\n    //events\\r\\n    event AuditorAdded(address indexed auditor);\\r\\n    event TaskAdded(uint256 indexed taskID, string name);\\r\\n    event UserAdded(address indexed userAddress);\\r\\n\\r\\n    //constructor\\r\\n    constructor(address _admin) {\\r\\n        admin = _admin;\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin); // Grant the default admin role to the user specified by the AccessControl\\r\\n    }\\r\\n\\r\\n    //Functions\\r\\n\\r\\n    /**\\r\\n     * Adds a new user to the system.\\r\\n     * Checks various conditions including whether the address is valid,\\r\\n     * if the sender has the required role, and if the address is not already assigned.\\r\\n     * If all conditions are met, grants the user role to the address and emits an event.\\r\\n     * @param _addressUser - Address of the user to be added.\\r\\n     */\\r\\n\\r\\n    function addUser(address _addressUser) public {\\r\\n        require(_addressUser != address(0), \\\"User address cannot be zero address\\\");\\r\\n        require(admin != _addressUser, \\\"Admin cannot be user\\\");\\r\\n        // Check if the sender has either the default admin role or the auditor role using the AccessControl library\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(AUDITOR_ROLE, msg.sender),\\r\\n            \\\"Caller is not an admin or auditor\\\"\\r\\n        );\\r\\n\\r\\n        require(!getUserForAddress(_addressUser), \\\"User already exists\\\");\\r\\n        require(!getAuditorForAddress(_addressUser), \\\"Adress is auditor\\\");\\r\\n\\r\\n        _grantRole(USER_ROLE, _addressUser);\\r\\n        users[userID] = _addressUser;\\r\\n        userID++;\\r\\n        emit UserAdded(_addressUser);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns an array containing all user addresses.\\r\\n     * Creates a new array with the size equal to the current number of users (userID).\\r\\n     * Iterates through the users mapping to populate the array with user addresses.\\r\\n     * @return address[] memory - An array of user addresses.\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * Retrieves a list of all user addresses.\\r\\n     * Creates a new array with the length equal to the current number of users (userID).\\r\\n     * Iterates over the users mapping to populate the array with user addresses.\\r\\n     * Returns the array of user addresses.\\r\\n     * @return address[] memory - An array containing all user addresses.\\r\\n     */\\r\\n\\r\\n    function getAllUsers() public view returns (address[] memory) {\\r\\n        address[] memory userList = new address[](userID);\\r\\n        for (uint256 i = 0; i < userID; i++) {\\r\\n            userList[i] = users[i];\\r\\n        }\\r\\n        return userList;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Checks if a given address is associated with any user.\\r\\n     * Validates that the provided address is not the zero address.\\r\\n     * Iterates through the user mapping to see if the address matches any existing user addresses.\\r\\n     * Returns true if a match is found; otherwise, returns false.\\r\\n     * @param _addressUser - The address to be checked.\\r\\n     * @return bool - True if the address is a user, false otherwise.\\r\\n     */\\r\\n    function getUserForAddress(address _addressUser) public view returns (bool) {\\r\\n        require(_addressUser != address(0), \\\"User address cannot be zero address\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < userID; i++) {\\r\\n            if (users[i] == _addressUser) return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Creates a new task with the given name, description, and rules.\\r\\n     * Ensures the provided name, description, and rules are not empty and that a reward is provided.\\r\\n     * Stores the task in the tasks mapping with a unique taskID and initializes task properties.\\r\\n     * Emits a TaskAdded event to signal that a new task has been created.\\r\\n     * @param _name - The name of the task.\\r\\n     * @param _description - A brief description of the task.\\r\\n     * @param _rules - The rules and guidelines for the task.\\r\\n     */\\r\\n    function createTask(\\r\\n        string memory _name,\\r\\n        string memory _description,\\r\\n        string memory _rules\\r\\n    ) public payable onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(bytes(_name).length > 0, \\\"Task name cannot be empty\\\");\\r\\n        require(bytes(_description).length > 0, \\\"Task description cannot be empty\\\");\\r\\n        require(bytes(_rules).length > 0, \\\"Task rules cannot be empty\\\");\\r\\n        require(msg.value > 0, \\\"A reward must be provided\\\");\\r\\n\\r\\n        tasks[taskID] = Task(taskID, _name, _description, _rules, msg.value, payable(address(0)), false);\\r\\n\\r\\n        taskID++;\\r\\n        emit TaskAdded(taskID, _name);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Creates a new task with the specified name, description, rules, and responsible address.\\r\\n     * Ensures the provided name, description, and rules are not empty.\\r\\n     * Validates that a reward is provided and that the responsible address is not an admin or auditor.\\r\\n     * Assigns the task to the responsible address, granting the user role if not already assigned.\\r\\n     * Emits events to signal the addition of the user (if new) and the task.\\r\\n     * @param _name - The name of the task.\\r\\n     * @param _description - A brief description of the task.\\r\\n     * @param _rules - The rules and guidelines for the task.\\r\\n     * @param _responsible - The address responsible for the task.\\r\\n     */\\r\\n    function createTaskWithResponsible(\\r\\n        string memory _name,\\r\\n        string memory _description,\\r\\n        string memory _rules,\\r\\n        address _responsible\\r\\n    ) public payable onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(bytes(_name).length > 0, \\\"Task name cannot be empty\\\");\\r\\n        require(bytes(_description).length > 0, \\\"Task description cannot be empty\\\");\\r\\n        require(bytes(_rules).length > 0, \\\"Task rules cannot be empty\\\");\\r\\n\\r\\n        require(msg.value > 0, \\\"A reward must be provided\\\");\\r\\n        require(admin != _responsible, \\\"Address is admin\\\");\\r\\n        require(!getAuditorForAddress(_responsible), \\\"Adress is auditor\\\");\\r\\n\\r\\n        tasks[taskID] = Task(taskID, _name, _description, _rules, msg.value, payable(_responsible), false);\\r\\n\\r\\n        if (!getUserForAddress(_responsible)) {\\r\\n            _grantRole(USER_ROLE, _responsible);\\r\\n            users[userID] = _responsible;\\r\\n            userID++;\\r\\n            emit UserAdded(_responsible);\\r\\n        }\\r\\n\\r\\n        taskID++;\\r\\n        emit TaskAdded(taskID, _name);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieves the name and description of a task by its ID.\\r\\n     * Accesses the task from the tasks mapping using the provided task ID.\\r\\n     * Returns the task's name and description.\\r\\n     * @param _taskID - The ID of the task to retrieve.\\r\\n     * @return (string memory, string memory) - The name and description of the task.\\r\\n     */\\r\\n    function getTask(uint256 _taskID) public view returns (string memory, string memory) {\\r\\n        Task storage task = tasks[_taskID];\\r\\n        return (task.name, task.description);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieves a list of all tasks.\\r\\n     * Ensures the caller has either the default admin role or the auditor role.\\r\\n     * Creates a new array with the length equal to the number of tasks.\\r\\n     * Iterates over the tasks mapping to populate the array with task details.\\r\\n     * @return Task[] memory - An array containing all tasks.\\r\\n     */\\r\\n    function getAllTasks() public view returns (Task[] memory) {\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(AUDITOR_ROLE, msg.sender),\\r\\n            \\\"Caller is not an admin or auditor\\\"\\r\\n        );\\r\\n        Task[] memory taskList = new Task[](taskID);\\r\\n        for (uint256 i = 0; i < taskID; i++) {\\r\\n            Task storage task = tasks[i];\\r\\n            taskList[i] = task;\\r\\n        }\\r\\n        return taskList;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieves all tasks assigned to the caller.\\r\\n     * Ensures the caller has the USER_ROLE and the sender address is not the zero address.\\r\\n     * Counts the number of tasks assigned to the caller.\\r\\n     * Creates an array to store these tasks.\\r\\n     * Iterates over the tasks mapping to populate the array with tasks assigned to the caller.\\r\\n     * @return Task[] memory - An array containing tasks assigned to the caller.\\r\\n     */\\r\\n    function getTasksByResponsible() public view onlyRole(USER_ROLE) returns (Task[] memory) {\\r\\n        require(msg.sender != address(0), \\\"Sender address is required\\\");\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < taskID; i++) if (tasks[i].responsible == msg.sender) count++;\\r\\n\\r\\n        Task[] memory result = new Task[](count);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < taskID; i++) {\\r\\n            if (tasks[i].responsible == msg.sender) {\\r\\n                result[index] = tasks[i];\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieves a list of tasks that do not have an assigned responsible address.\\r\\n     * Iterates through the tasks mapping to count the number of tasks without a responsible address.\\r\\n     * Creates an array to store these tasks.\\r\\n     * Populates the array with tasks that have no responsible address.\\r\\n     * Returns the array of tasks without a responsible address.\\r\\n     * @return Task[] memory - An array containing tasks without a responsible address.\\r\\n     */\\r\\n    function getTasksWithoutResponsible() public view returns (Task[] memory) {\\r\\n        uint256 count = 0;\\r\\n        uint256 index = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < taskID; i++) {\\r\\n            if (tasks[i].responsible == address(0)) count++;\\r\\n        }\\r\\n\\r\\n        Task[] memory tasksWithoutResponsible = new Task[](count);\\r\\n\\r\\n        for (uint256 i = 0; i < taskID; i++) {\\r\\n            if (tasks[i].responsible == address(0)) {\\r\\n                tasksWithoutResponsible[index] = tasks[i];\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tasksWithoutResponsible;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieves a completed task by its task ID.\\r\\n     * Iterates through the tasksCompleted mapping to find the task with the matching task ID.\\r\\n     * Returns the completed task if found, otherwise returns a default TaskCompleted object.\\r\\n     * @param _taskID - The ID of the task to retrieve.\\r\\n     * @return TaskCompleted memory - The completed task corresponding to the given task ID.\\r\\n     */\\r\\n    function getCompletedTask(uint256 _taskID) public view returns (TaskCompleted memory) {\\r\\n        for (uint256 i = 0; i < taskCompletedID; i++) {\\r\\n            if (tasksCompleted[i].taskID == _taskID) {\\r\\n                return tasksCompleted[i];\\r\\n            }\\r\\n        }\\r\\n        return TaskCompleted(taskCompletedID, 0, \\\"\\\", address(0), false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows a user to accept a task by assigning themselves as the responsible party.\\r\\n     * Ensures that the sender is not the admin, the task exists, the task has no assigned responsible, and the sender is not an auditor.\\r\\n     * If the sender is not already a user, assigns the user role to the sender and adds them to the users list.\\r\\n     * Updates the task to mark the sender as the responsible party.\\r\\n     * @param _taskID - The ID of the task to be accepted.\\r\\n     */\\r\\n    function acceptTask(uint256 _taskID) public {\\r\\n        require(msg.sender != admin, \\\"Address is admin\\\");\\r\\n        require(bytes(tasks[_taskID].name).length > 0, \\\"The task does not exist\\\");\\r\\n        require(tasks[_taskID].responsible == address(0), \\\"Task must have a responsible assigned\\\");\\r\\n        require(!getAuditorForAddress(msg.sender), \\\"The auditor cannot take on tasks\\\");\\r\\n\\r\\n        if (!getUserForAddress(msg.sender)) {\\r\\n            _grantRole(USER_ROLE, msg.sender);\\r\\n            users[userID] = msg.sender;\\r\\n            userID++;\\r\\n            emit UserAdded(msg.sender);\\r\\n        }\\r\\n        tasks[_taskID].responsible = payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Marks a task as completed by providing proof.\\r\\n     * Ensures the caller has the USER_ROLE and validates that the task exists and the proof is not empty.\\r\\n     * Checks if the task has already been completed; if not, it records the completion.\\r\\n     * @param _taskID - The ID of the task to mark as completed.\\r\\n     * @param _proof - The proof of task completion.\\r\\n     */\\r\\n    function completedTask(uint256 _taskID, string memory _proof) public onlyRole(USER_ROLE) {\\r\\n        require(bytes(tasks[_taskID].name).length > 0, \\\"The task does not exist\\\");\\r\\n        require(bytes(_proof).length > 0, \\\"Proof cannot be empty\\\");\\r\\n\\r\\n        bool alreadyCompleted = false;\\r\\n        for (uint256 i = 0; i < taskCompletedID; i++) {\\r\\n            if (tasksCompleted[i].taskID == _taskID) {\\r\\n                require(bytes(tasksCompleted[i].proof).length == 0, \\\"The task has already been completed with proof\\\");\\r\\n                alreadyCompleted = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!alreadyCompleted) {\\r\\n            tasksCompleted[taskCompletedID] = TaskCompleted(taskCompletedID, _taskID, _proof, address(0), false);\\r\\n            taskCompletedID++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Verifies a completed task.\\r\\n     * Checks if the sender has either the default admin role or the auditor role.\\r\\n     * Ensures the proof is provided and the task exists.\\r\\n     * If verified, assigns the verifier and transfers the reward to the responsible.\\r\\n     * If not verified, releases the task for reassignment.\\r\\n     * @param _taskCompletedID - The ID of the completed task to verify.\\r\\n     * @param _verified - Boolean indicating whether the task is verified.\\r\\n     */\\r\\n    function verifiedTask(uint256 _taskCompletedID, bool _verified) public {\\r\\n        // Check if the sender has either the default admin role or the auditor role using the AccessControl library\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(AUDITOR_ROLE, msg.sender),\\r\\n            \\\"Caller is not an admin or auditor\\\"\\r\\n        );\\r\\n\\r\\n        string memory _proof = tasksCompleted[_taskCompletedID].proof;\\r\\n        require(bytes(_proof).length > 0, \\\"Proof cannot be empty\\\");\\r\\n\\r\\n        uint256 _taskID = tasksCompleted[_taskCompletedID].taskID;\\r\\n\\r\\n        require(bytes(tasks[_taskID].name).length > 0, \\\"The task does not exist\\\");\\r\\n        require(tasks[_taskID].responsible != payable(address(0)), \\\"No responsible assigned\\\");\\r\\n        if (_verified) {\\r\\n            tasksCompleted[_taskCompletedID].verifier = msg.sender;\\r\\n            tasksCompleted[_taskCompletedID].verified = _verified;\\r\\n\\r\\n            uint256 _amount = tasks[_taskID].reward;\\r\\n            address _responsible = tasks[_taskID].responsible;\\r\\n            tasks[_taskID].completed = true;\\r\\n\\r\\n            (bool success, ) = payable(_responsible).call{ value: _amount }(\\\"\\\");\\r\\n            require(success);\\r\\n        } else {\\r\\n            //releases the task so that it can be accepted by another user\\r\\n            tasksCompleted[_taskCompletedID].proof = \\\"\\\";\\r\\n            tasksCompleted[_taskCompletedID].verifier = msg.sender;\\r\\n            tasksCompleted[_taskCompletedID].verified = _verified;\\r\\n\\r\\n            tasks[_taskID].responsible = payable(address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a new auditor to the system.\\r\\n     * Ensures the provided auditor address is valid and not already assigned as an admin, auditor, or user.\\r\\n     * Creates a new Auditor object and assigns the AUDITOR_ROLE to the given address.\\r\\n     * Increments the auditorID and emits an event to signal that a new auditor has been added.\\r\\n     * @param _auditorAddress - The address of the auditor to be added.\\r\\n     */\\r\\n    function addAuditor(address _auditorAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(_auditorAddress != address(0), \\\"Auditor address cannot be zero address\\\");\\r\\n        require(admin != _auditorAddress, \\\"Admin cannot be auditor\\\");\\r\\n        require(!getAuditorForAddress(_auditorAddress), \\\"Auditor already exist\\\");\\r\\n        require(!getUserForAddress(_auditorAddress), \\\"User already exists\\\");\\r\\n\\r\\n        auditors[auditorID] = Auditor(auditorID, _auditorAddress, false);\\r\\n        _grantRole(AUDITOR_ROLE, _auditorAddress);\\r\\n        auditorID++;\\r\\n\\r\\n        emit AuditorAdded(_auditorAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieves a list of all auditors.\\r\\n     * Creates a new array with the length equal to the number of auditors (auditorID).\\r\\n     * Iterates over the auditors mapping to populate the array with auditor details.\\r\\n     * Returns the array of auditors.\\r\\n     * @return Auditor[] memory - An array containing all auditors.\\r\\n     */\\r\\n    function getAllAuditors() public view returns (Auditor[] memory) {\\r\\n        Auditor[] memory auditorList = new Auditor[](auditorID);\\r\\n        for (uint256 i = 0; i < auditorID; i++) {\\r\\n            Auditor storage auditor = auditors[i];\\r\\n            auditorList[i] = auditor;\\r\\n        }\\r\\n        return auditorList;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Checks if a given address is associated with an auditor.\\r\\n     * Iterates through the auditors mapping to see if the address matches any existing auditor addresses.\\r\\n     * Returns true if a match is found; otherwise, returns false.\\r\\n     * @param _auditorAddress - The address to be checked.\\r\\n     * @return bool - True if the address is an auditor, false otherwise.\\r\\n     */\\r\\n    function getAuditorForAddress(address _auditorAddress) public view returns (bool) {\\r\\n        for (uint256 i = 0; i <= auditorID; i++) {\\r\\n            if (auditors[i].auditorAddress == _auditorAddress) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Blocks an auditor by setting their block status to true and revoking their auditor role.\\r\\n     * Ensures the auditor exists by checking if their address is not the zero address.\\r\\n     * Updates the auditor's block status and revokes their AUDITOR_ROLE.\\r\\n     * @param _auditorID - The ID of the auditor to be blocked.\\r\\n     */\\r\\n    function blockAuditor(uint256 _auditorID) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(auditors[_auditorID].auditorAddress != address(0), \\\"Auditor does not exist\\\");\\r\\n        auditors[_auditorID].block = true;\\r\\n        _revokeRole(AUDITOR_ROLE, auditors[_auditorID].auditorAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unlocks an auditor by setting their block status to false and re-granting their auditor role.\\r\\n     * Ensures the auditor exists by checking if their address is not the zero address.\\r\\n     * Updates the auditor's block status and grants them the AUDITOR_ROLE again.\\r\\n     * @param _auditorID - The ID of the auditor to be unlocked.\\r\\n     */\\r\\n    function unlockAuditor(uint256 _auditorID) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(auditors[_auditorID].auditorAddress != address(0), \\\"Auditor does not exist\\\");\\r\\n        auditors[_auditorID].block = false;\\r\\n        _grantRole(AUDITOR_ROLE, auditors[_auditorID].auditorAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7f7fa33bcfffff626755a9a1df410bdb557bf474f0b8617dd04d97dfa821a775\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c80637d4d91c011610102578063d547741f11610095578063f136e3f611610064578063f136e3f614610622578063f4bdfff414610637578063f72dcadf14610657578063f851a4401461066c57600080fd5b8063d547741f146105a0578063da4a3009146105c0578063e2842d79146105e0578063e429cef11461060257600080fd5b8063b6ef730a116100d1578063b6ef730a14610544578063c8da44551461055a578063d2344f0a1461056d578063d50f42951461058057600080fd5b80637d4d91c0146104af5780638d977672146104dc57806391d148541461050f578063a217fddf1461052f57600080fd5b806336568abe1161017a5780634dcbb8ee116101495780634dcbb8ee146104295780636e1d616e1461044b578063772a3fc31461046d578063779900b41461048d57600080fd5b806336568abe1461037b578063365b98b21461039b578063421b2d8b146103e9578063488f0c911461040957600080fd5b80631d65e77e116101b65780631d65e77e146102dd57806323d8263d1461030b578063248a9ca31461032b5780632f2ff15d1461035b57600080fd5b806301ffc9a7146101e8578063131191611461021d5780631b8b444c1461024d5780631bf6912d146102bb575b600080fd5b3480156101f457600080fd5b50610208610203366004612cc2565b61068c565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5061023f6000805160206134db83398151915281565b604051908152602001610214565b34801561025957600080fd5b50610296610268366004612cf3565b600760205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b039092166020840152151590820152606001610214565b3480156102c757600080fd5b506102db6102d6366004612cf3565b6106c3565b005b3480156102e957600080fd5b506102fd6102f8366004612cf3565b6108c5565b604051610214929190612d52565b34801561031757600080fd5b506102db610326366004612d80565b610a06565b34801561033757600080fd5b5061023f610346366004612cf3565b60009081526020819052604090206001015490565b34801561036757600080fd5b506102db610376366004612dd1565b610d35565b34801561038757600080fd5b506102db610396366004612dd1565b610d5a565b3480156103a757600080fd5b506103d16103b6366004612cf3565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610214565b3480156103f557600080fd5b506102db610404366004612dfd565b610d92565b34801561041557600080fd5b506102db610424366004612cf3565b610f74565b34801561043557600080fd5b5061043e611025565b6040516102149190612e18565b34801561045757600080fd5b5061023f6000805160206134bb83398151915281565b34801561047957600080fd5b50610208610488366004612dfd565b611120565b34801561049957600080fd5b506104a2611175565b6040516102149190612e7c565b3480156104bb57600080fd5b506104cf6104ca366004612cf3565b611468565b6040516102149190612f51565b3480156104e857600080fd5b506104fc6104f7366004612cf3565b61161d565b6040516102149796959493929190612fab565b34801561051b57600080fd5b5061020861052a366004612dd1565b6117ff565b34801561053b57600080fd5b5061023f600081565b34801561055057600080fd5b5061023f60015481565b6102db6105683660046130b8565b611828565b6102db61057b366004613151565b611bcc565b34801561058c57600080fd5b506102db61059b366004612cf3565b611e35565b3480156105ac57600080fd5b506102db6105bb366004612dd1565b611ee0565b3480156105cc57600080fd5b506102db6105db3660046131d9565b611f05565b3480156105ec57600080fd5b506105f561211a565b6040516102149190613220565b34801561060e57600080fd5b506102db61061d366004612dfd565b6121cb565b34801561062e57600080fd5b506104a26123fe565b34801561064357600080fd5b50610208610652366004612dfd565b612729565b34801561066357600080fd5b506104a261279a565b34801561067857600080fd5b506005546103d1906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806106bd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6005546001600160a01b031633036107155760405162461bcd60e51b815260206004820152601060248201526f20b2323932b9b99034b99030b236b4b760811b60448201526064015b60405180910390fd5b600081815260066020526040812060010180546107319061326d565b9050116107505760405162461bcd60e51b815260040161070c906132a1565b6000818152600660205260409020600501546001600160a01b0316156107c65760405162461bcd60e51b815260206004820152602560248201527f5461736b206d7573742068617665206120726573706f6e7369626c65206173736044820152641a59db995960da1b606482015260840161070c565b6107cf33611120565b1561081c5760405162461bcd60e51b815260206004820181905260248201527f5468652061756469746f722063616e6e6f742074616b65206f6e207461736b73604482015260640161070c565b61082533612729565b6108a2576108416000805160206134db83398151915233612b33565b5060038054600090815260086020526040812080546001600160a01b0319163317905581549190610871836132d8565b909155505060405133907f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f90600090a25b600090815260066020526040902060050180546001600160a01b03191633179055565b600081815260066020526040902060018101805460609283929091600283019082906108f09061326d565b80601f016020809104026020016040519081016040528092919081815260200182805461091c9061326d565b80156109695780601f1061093e57610100808354040283529160200191610969565b820191906000526020600020905b81548152906001019060200180831161094c57829003601f168201915b5050505050915080805461097c9061326d565b80601f01602080910402602001604051908101604052809291908181526020018280546109a89061326d565b80156109f55780601f106109ca576101008083540402835291602001916109f5565b820191906000526020600020905b8154815290600101906020018083116109d857829003601f168201915b505050505090509250925050915091565b610a116000336117ff565b80610a2f5750610a2f6000805160206134bb833981519152336117ff565b610a4b5760405162461bcd60e51b815260040161070c906132ff565b60008281526009602052604081206002018054610a679061326d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a939061326d565b8015610ae05780601f10610ab557610100808354040283529160200191610ae0565b820191906000526020600020905b815481529060010190602001808311610ac357829003601f168201915b505050505090506000815111610b305760405162461bcd60e51b815260206004820152601560248201527450726f6f662063616e6e6f7420626520656d70747960581b604482015260640161070c565b60008381526009602090815260408083206001908101548085526006909352908320018054919291610b619061326d565b905011610b805760405162461bcd60e51b815260040161070c906132a1565b6000818152600660205260409020600501546001600160a01b0316610be75760405162461bcd60e51b815260206004820152601760248201527f4e6f20726573706f6e7369626c652061737369676e6564000000000000000000604482015260640161070c565b8215610cb35760008481526009602090815260408083206003018054871515600160a01b90810260ff60a01b193381166001600160a81b031990941693909317179092558585526006909352818420600481015460059091018054948516909217909155905190926001600160a01b039092169190829084908381818185875af1925050503d8060008114610c98576040519150601f19603f3d011682016040523d82523d6000602084013e610c9d565b606091505b5050905080610cab57600080fd5b505050610d2f565b6040805160208082018352600080835287815260099091529190912060020190610cdd908261338e565b50600084815260096020908152604080832060030180546001600160a81b0319163360ff60a01b191617600160a01b881515021790558383526006909152902060050180546001600160a01b03191690555b50505050565b600082815260208190526040902060010154610d5081612bc5565b610d2f8383612b33565b6001600160a01b0381163314610d835760405163334bd91960e11b815260040160405180910390fd5b610d8d8282612bd2565b505050565b6001600160a01b038116610db85760405162461bcd60e51b815260040161070c9061344e565b6005546001600160a01b03808316911603610e0c5760405162461bcd60e51b815260206004820152601460248201527320b236b4b71031b0b73737ba103132903ab9b2b960611b604482015260640161070c565b610e176000336117ff565b80610e355750610e356000805160206134bb833981519152336117ff565b610e515760405162461bcd60e51b815260040161070c906132ff565b610e5a81612729565b15610e9d5760405162461bcd60e51b81526020600482015260136024820152725573657220616c72656164792065786973747360681b604482015260640161070c565b610ea681611120565b15610ee75760405162461bcd60e51b815260206004820152601160248201527020b23932b9b99034b99030bab234ba37b960791b604482015260640161070c565b610eff6000805160206134db83398151915282612b33565b5060038054600090815260086020526040812080546001600160a01b0319166001600160a01b03851617905581549190610f38836132d8565b90915550506040516001600160a01b038216907f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f90600090a250565b6000610f7f81612bc5565b6000828152600760205260409020600101546001600160a01b0316610fdf5760405162461bcd60e51b8152602060048201526016602482015275105d591a5d1bdc88191bd95cc81b9bdd08195e1a5cdd60521b604482015260640161070c565b6000828152600760205260409020600101805460ff60a01b198116600160a01b17909155610d8d906000805160206134bb833981519152906001600160a01b0316612bd2565b6060600060025467ffffffffffffffff81111561104457611044613015565b60405190808252806020026020018201604052801561108f57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816110625790505b50905060005b60025481101561111a5760008181526007602090815260409182902082516060810184528154815260018201546001600160a01b03811693820193909352600160a01b90920460ff1615159282019290925283518490849081106110fb576110fb613491565b6020026020010181905250508080611112906132d8565b915050611095565b50919050565b6000805b600254811161116c576000818152600760205260409020600101546001600160a01b0380851691160361115a5750600192915050565b80611164816132d8565b915050611124565b50600092915050565b60606111826000336117ff565b806111a057506111a06000805160206134bb833981519152336117ff565b6111bc5760405162461bcd60e51b815260040161070c906132ff565b600060015467ffffffffffffffff8111156111d9576111d9613015565b60405190808252806020026020018201604052801561121257816020015b6111ff612c7a565b8152602001906001900390816111f75790505b50905060005b60015481101561111a576000600660008381526020019081526020016000209050806040518060e00160405290816000820154815260200160018201805461125f9061326d565b80601f016020809104026020016040519081016040528092919081815260200182805461128b9061326d565b80156112d85780601f106112ad576101008083540402835291602001916112d8565b820191906000526020600020905b8154815290600101906020018083116112bb57829003601f168201915b505050505081526020016002820180546112f19061326d565b80601f016020809104026020016040519081016040528092919081815260200182805461131d9061326d565b801561136a5780601f1061133f5761010080835404028352916020019161136a565b820191906000526020600020905b81548152906001019060200180831161134d57829003601f168201915b505050505081526020016003820180546113839061326d565b80601f01602080910402602001604051908101604052809291908181526020018280546113af9061326d565b80156113fc5780601f106113d1576101008083540402835291602001916113fc565b820191906000526020600020905b8154815290600101906020018083116113df57829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff161515606090910152835184908490811061144957611449613491565b6020026020010181905250508080611460906132d8565b915050611218565b6114a56040518060a0016040528060008152602001600081526020016060815260200160006001600160a01b031681526020016000151581525090565b60005b6004548110156115cf576000818152600960205260409020600101548390036115bd57600960008281526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201805461150d9061326d565b80601f01602080910402602001604051908101604052809291908181526020018280546115399061326d565b80156115865780601f1061155b57610100808354040283529160200191611586565b820191906000526020600020905b81548152906001019060200180831161156957829003601f168201915b5050509183525050600391909101546001600160a01b0381166020830152600160a01b900460ff1615156040909101529392505050565b806115c7816132d8565b9150506114a8565b506040518060a0016040528060045481526020016000815260200160405180602001604052806000815250815260200160006001600160a01b03168152602001600015158152509050919050565b6006602052600090815260409020805460018201805491929161163f9061326d565b80601f016020809104026020016040519081016040528092919081815260200182805461166b9061326d565b80156116b85780601f1061168d576101008083540402835291602001916116b8565b820191906000526020600020905b81548152906001019060200180831161169b57829003601f168201915b5050505050908060020180546116cd9061326d565b80601f01602080910402602001604051908101604052809291908181526020018280546116f99061326d565b80156117465780601f1061171b57610100808354040283529160200191611746565b820191906000526020600020905b81548152906001019060200180831161172957829003601f168201915b50505050509080600301805461175b9061326d565b80601f01602080910402602001604051908101604052809291908181526020018280546117879061326d565b80156117d45780601f106117a9576101008083540402835291602001916117d4565b820191906000526020600020905b8154815290600101906020018083116117b757829003601f168201915b5050505060048301546005909301549192916001600160a01b0381169150600160a01b900460ff1687565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061183381612bc5565b60008551116118805760405162461bcd60e51b81526020600482015260196024820152785461736b206e616d652063616e6e6f7420626520656d70747960381b604482015260640161070c565b60008451116118d15760405162461bcd60e51b815260206004820181905260248201527f5461736b206465736372697074696f6e2063616e6e6f7420626520656d707479604482015260640161070c565b60008351116119225760405162461bcd60e51b815260206004820152601a60248201527f5461736b2072756c65732063616e6e6f7420626520656d707479000000000000604482015260640161070c565b6000341161196e5760405162461bcd60e51b815260206004820152601960248201527810481c995dd85c99081b5d5cdd081899481c1c9bdd9a591959603a1b604482015260640161070c565b6005546001600160a01b038084169116036119be5760405162461bcd60e51b815260206004820152601060248201526f20b2323932b9b99034b99030b236b4b760811b604482015260640161070c565b6119c782611120565b15611a085760405162461bcd60e51b815260206004820152601160248201527020b23932b9b99034b99030bab234ba37b960791b604482015260640161070c565b6040805160e0810182526001805480835260208084018a81528486018a9052606085018990523460808601526001600160a01b03881660a0860152600060c08601819052928352600690915293902082518155925191929190820190611a6e908261338e565b5060408201516002820190611a83908261338e565b5060608201516003820190611a98908261338e565b506080820151600482015560a08201516005909101805460c0909301511515600160a01b026001600160a81b03199093166001600160a01b0390921691909117919091179055611ae782612729565b611b7657611b036000805160206134db83398151915283612b33565b5060038054600090815260086020526040812080546001600160a01b0319166001600160a01b03861617905581549190611b3c836132d8565b90915550506040516001600160a01b038316907f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f90600090a25b60018054906000611b86836132d8565b91905055506001547f2ee7ce8bac091b03a0c391c07ee88a246bdd72bdc6b1ef1ce4d99220595d32c586604051611bbd91906134a7565b60405180910390a25050505050565b6000611bd781612bc5565b6000845111611c245760405162461bcd60e51b81526020600482015260196024820152785461736b206e616d652063616e6e6f7420626520656d70747960381b604482015260640161070c565b6000835111611c755760405162461bcd60e51b815260206004820181905260248201527f5461736b206465736372697074696f6e2063616e6e6f7420626520656d707479604482015260640161070c565b6000825111611cc65760405162461bcd60e51b815260206004820152601a60248201527f5461736b2072756c65732063616e6e6f7420626520656d707479000000000000604482015260640161070c565b60003411611d125760405162461bcd60e51b815260206004820152601960248201527810481c995dd85c99081b5d5cdd081899481c1c9bdd9a591959603a1b604482015260640161070c565b6040805160e08101825260018054808352602080840189815284860189905260608501889052346080860152600060a0860181905260c08601819052928352600690915293902082518155925191929190820190611d70908261338e565b5060408201516002820190611d85908261338e565b5060608201516003820190611d9a908261338e565b506080820151600482015560a08201516005909101805460c0909301511515600160a01b026001600160a81b03199093166001600160a01b039092169190911791909117905560018054906000611df0836132d8565b91905055506001547f2ee7ce8bac091b03a0c391c07ee88a246bdd72bdc6b1ef1ce4d99220595d32c585604051611e2791906134a7565b60405180910390a250505050565b6000611e4081612bc5565b6000828152600760205260409020600101546001600160a01b0316611ea05760405162461bcd60e51b8152602060048201526016602482015275105d591a5d1bdc88191bd95cc81b9bdd08195e1a5cdd60521b604482015260640161070c565b6000828152600760205260409020600101805460ff60a01b198116909155610d8d906000805160206134bb833981519152906001600160a01b0316612b33565b600082815260208190526040902060010154611efb81612bc5565b610d2f8383612bd2565b6000805160206134db833981519152611f1d81612bc5565b60008381526006602052604081206001018054611f399061326d565b905011611f585760405162461bcd60e51b815260040161070c906132a1565b6000825111611fa15760405162461bcd60e51b815260206004820152601560248201527450726f6f662063616e6e6f7420626520656d70747960581b604482015260640161070c565b6000805b600454811015612065576000818152600960205260409020600101548590036120535760008181526009602052604090206002018054611fe49061326d565b15905061204a5760405162461bcd60e51b815260206004820152602e60248201527f546865207461736b2068617320616c7265616479206265656e20636f6d706c6560448201526d3a32b2103bb4ba3410383937b7b360911b606482015260840161070c565b60019150612065565b8061205d816132d8565b915050611fa5565b5080610d2f576040805160a08101825260045480825260208083018881528385018881526000606086018190526080860181905293845260099092529390912082518155925160018401555190919060028201906120c3908261338e565b506060820151600390910180546080909301511515600160a01b026001600160a81b03199093166001600160a01b03909216919091179190911790556004805490600061210f836132d8565b919050555050505050565b6060600060035467ffffffffffffffff81111561213957612139613015565b604051908082528060200260200182016040528015612162578160200160208202803683370190505b50905060005b60035481101561111a5760008181526008602052604090205482516001600160a01b03909116908390839081106121a1576121a1613491565b6001600160a01b0390921660209283029190910190910152806121c3816132d8565b915050612168565b60006121d681612bc5565b6001600160a01b03821661223b5760405162461bcd60e51b815260206004820152602660248201527f41756469746f7220616464726573732063616e6e6f74206265207a65726f206160448201526564647265737360d01b606482015260840161070c565b6005546001600160a01b038084169116036122985760405162461bcd60e51b815260206004820152601760248201527f41646d696e2063616e6e6f742062652061756469746f72000000000000000000604482015260640161070c565b6122a182611120565b156122e65760405162461bcd60e51b8152602060048201526015602482015274105d591a5d1bdc88185b1c9958591e48195e1a5cdd605a1b604482015260640161070c565b6122ef82612729565b156123325760405162461bcd60e51b81526020600482015260136024820152725573657220616c72656164792065786973747360681b604482015260640161070c565b604080516060810182526002548082526001600160a01b0380861660208085019182526000858701818152948152600790915294909420925183559251600192909201805491511515600160a01b026001600160a81b031990921692909316919091171790556123b06000805160206134bb83398151915283612b33565b50600280549060006123c1836132d8565b90915550506040516001600160a01b038316907f2c31044378cc14466459f09320dd4057d7ad6e99b194c0800c78227383a2529690600090a25050565b606060008060005b60015481101561244f576000818152600660205260409020600501546001600160a01b031661243d5782612439816132d8565b9350505b80612447816132d8565b915050612406565b5060008267ffffffffffffffff81111561246b5761246b613015565b6040519080825280602002602001820160405280156124a457816020015b612491612c7a565b8152602001906001900390816124895790505b50905060005b600154811015612721576000818152600660205260409020600501546001600160a01b031661270f57600660008281526020019081526020016000206040518060e00160405290816000820154815260200160018201805461250b9061326d565b80601f01602080910402602001604051908101604052809291908181526020018280546125379061326d565b80156125845780601f1061255957610100808354040283529160200191612584565b820191906000526020600020905b81548152906001019060200180831161256757829003601f168201915b5050505050815260200160028201805461259d9061326d565b80601f01602080910402602001604051908101604052809291908181526020018280546125c99061326d565b80156126165780601f106125eb57610100808354040283529160200191612616565b820191906000526020600020905b8154815290600101906020018083116125f957829003601f168201915b5050505050815260200160038201805461262f9061326d565b80601f016020809104026020016040519081016040528092919081815260200182805461265b9061326d565b80156126a85780601f1061267d576101008083540402835291602001916126a8565b820191906000526020600020905b81548152906001019060200180831161268b57829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015282518390859081106126f5576126f5613491565b6020026020010181905250828061270b906132d8565b9350505b80612719816132d8565b9150506124aa565b509392505050565b60006001600160a01b0382166127515760405162461bcd60e51b815260040161070c9061344e565b60005b60035481101561116c576000818152600860205260409020546001600160a01b038085169116036127885750600192915050565b80612792816132d8565b915050612754565b60606000805160206134db8339815191526127b481612bc5565b336128015760405162461bcd60e51b815260206004820152601a60248201527f53656e6465722061646472657373206973207265717569726564000000000000604482015260640161070c565b6000805b60015481101561285257600081815260066020526040902060050154336001600160a01b0390911603612840578161283c816132d8565b9250505b8061284a816132d8565b915050612805565b5060008167ffffffffffffffff81111561286e5761286e613015565b6040519080825280602002602001820160405280156128a757816020015b612894612c7a565b81526020019060019003908161288c5790505b5090506000805b600154811015612b2957600081815260066020526040902060050154336001600160a01b0390911603612b1757600660008281526020019081526020016000206040518060e0016040529081600082015481526020016001820180546129139061326d565b80601f016020809104026020016040519081016040528092919081815260200182805461293f9061326d565b801561298c5780601f106129615761010080835404028352916020019161298c565b820191906000526020600020905b81548152906001019060200180831161296f57829003601f168201915b505050505081526020016002820180546129a59061326d565b80601f01602080910402602001604051908101604052809291908181526020018280546129d19061326d565b8015612a1e5780601f106129f357610100808354040283529160200191612a1e565b820191906000526020600020905b815481529060010190602001808311612a0157829003601f168201915b50505050508152602001600382018054612a379061326d565b80601f0160208091040260200160405190810160405280929190818152602001828054612a639061326d565b8015612ab05780601f10612a8557610100808354040283529160200191612ab0565b820191906000526020600020905b815481529060010190602001808311612a9357829003601f168201915b5050509183525050600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff1615156060909101528351849084908110612afd57612afd613491565b60200260200101819052508180612b13906132d8565b9250505b80612b21816132d8565b9150506128ae565b5090935050505090565b6000612b3f83836117ff565b612bbd576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055612b753390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016106bd565b5060006106bd565b612bcf8133612c3d565b50565b6000612bde83836117ff565b15612bbd576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016106bd565b612c4782826117ff565b612c765760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161070c565b5050565b6040518060e00160405280600081526020016060815260200160608152602001606081526020016000815260200160006001600160a01b031681526020016000151581525090565b600060208284031215612cd457600080fd5b81356001600160e01b031981168114612cec57600080fd5b9392505050565b600060208284031215612d0557600080fd5b5035919050565b6000815180845260005b81811015612d3257602081850181015186830182015201612d16565b506000602082860101526020601f19601f83011685010191505092915050565b604081526000612d656040830185612d0c565b8281036020840152612d778185612d0c565b95945050505050565b60008060408385031215612d9357600080fd5b8235915060208301358015158114612daa57600080fd5b809150509250929050565b80356001600160a01b0381168114612dcc57600080fd5b919050565b60008060408385031215612de457600080fd5b82359150612df460208401612db5565b90509250929050565b600060208284031215612e0f57600080fd5b612cec82612db5565b602080825282518282018190526000919060409081850190868401855b82811015612e6f57815180518552868101516001600160a01b03168786015285015115158585015260609093019290850190600101612e35565b5091979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612f4357603f19898403018552815160e08151855288820151818a870152612ed182870182612d0c565b9150508782015185820389870152612ee98282612d0c565b91505060608083015186830382880152612f038382612d0c565b6080858101519089015260a0808601516001600160a01b03169089015260c094850151151594909701939093525050509386019390860190600101612ea3565b509098975050505050505050565b6020815281516020820152602082015160408201526000604083015160a06060840152612f8160c0840182612d0c565b905060018060a01b0360608501511660808401526080840151151560a08401528091505092915050565b87815260e060208201526000612fc460e0830189612d0c565b8281036040840152612fd68189612d0c565b90508281036060840152612fea8188612d0c565b608084019690965250506001600160a01b039290921660a0830152151560c090910152949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261303c57600080fd5b813567ffffffffffffffff8082111561305757613057613015565b604051601f8301601f19908116603f0116810190828211818310171561307f5761307f613015565b8160405283815286602085880101111561309857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156130ce57600080fd5b843567ffffffffffffffff808211156130e657600080fd5b6130f28883890161302b565b9550602087013591508082111561310857600080fd5b6131148883890161302b565b9450604087013591508082111561312a57600080fd5b506131378782880161302b565b92505061314660608601612db5565b905092959194509250565b60008060006060848603121561316657600080fd5b833567ffffffffffffffff8082111561317e57600080fd5b61318a8783880161302b565b945060208601359150808211156131a057600080fd5b6131ac8783880161302b565b935060408601359150808211156131c257600080fd5b506131cf8682870161302b565b9150509250925092565b600080604083850312156131ec57600080fd5b82359150602083013567ffffffffffffffff81111561320a57600080fd5b6132168582860161302b565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156132615783516001600160a01b03168352928401929184019160010161323c565b50909695505050505050565b600181811c9082168061328157607f821691505b60208210810361111a57634e487b7160e01b600052602260045260246000fd5b60208082526017908201527f546865207461736b20646f6573206e6f74206578697374000000000000000000604082015260600190565b6000600182016132f857634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082526021908201527f43616c6c6572206973206e6f7420616e2061646d696e206f722061756469746f6040820152603960f91b606082015260800190565b601f821115610d8d57600081815260208120601f850160051c810160208610156133675750805b601f850160051c820191505b8181101561338657828155600101613373565b505050505050565b815167ffffffffffffffff8111156133a8576133a8613015565b6133bc816133b6845461326d565b84613340565b602080601f8311600181146133f157600084156133d95750858301515b600019600386901b1c1916600185901b178555613386565b600085815260208120601f198616915b8281101561342057888601518255948401946001909101908401613401565b508582101561343e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526023908201527f5573657220616464726573732063616e6e6f74206265207a65726f206164647260408201526265737360e81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b602081526000612cec6020830184612d0c56fe59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f514823911f2da1b49f045a0929a60b8c1f2a7fc8c06c7284ca3e8ab4e193a08c8a26469706673582212202f0686de517d27ca3226fc671809473ab21b8a7d96875c57ba9005af2bb3aec464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "acceptTask(uint256)": {
        "params": {
          "_taskID": "- The ID of the task to be accepted."
        }
      },
      "addAuditor(address)": {
        "params": {
          "_auditorAddress": "- The address of the auditor to be added."
        }
      },
      "addUser(address)": {
        "params": {
          "_addressUser": "- Address of the user to be added."
        }
      },
      "blockAuditor(uint256)": {
        "params": {
          "_auditorID": "- The ID of the auditor to be blocked."
        }
      },
      "completedTask(uint256,string)": {
        "params": {
          "_proof": "- The proof of task completion.",
          "_taskID": "- The ID of the task to mark as completed."
        }
      },
      "createTask(string,string,string)": {
        "params": {
          "_description": "- A brief description of the task.",
          "_name": "- The name of the task.",
          "_rules": "- The rules and guidelines for the task."
        }
      },
      "createTaskWithResponsible(string,string,string,address)": {
        "params": {
          "_description": "- A brief description of the task.",
          "_name": "- The name of the task.",
          "_responsible": "- The address responsible for the task.",
          "_rules": "- The rules and guidelines for the task."
        }
      },
      "getAllAuditors()": {
        "returns": {
          "_0": "Auditor[] memory - An array containing all auditors."
        }
      },
      "getAllTasks()": {
        "returns": {
          "_0": "Task[] memory - An array containing all tasks."
        }
      },
      "getAllUsers()": {
        "returns": {
          "_0": "address[] memory - An array containing all user addresses."
        }
      },
      "getAuditorForAddress(address)": {
        "params": {
          "_auditorAddress": "- The address to be checked."
        },
        "returns": {
          "_0": "bool - True if the address is an auditor, false otherwise."
        }
      },
      "getCompletedTask(uint256)": {
        "params": {
          "_taskID": "- The ID of the task to retrieve."
        },
        "returns": {
          "_0": "TaskCompleted memory - The completed task corresponding to the given task ID."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTask(uint256)": {
        "params": {
          "_taskID": "- The ID of the task to retrieve."
        },
        "returns": {
          "_0": "(string memory, string memory) - The name and description of the task."
        }
      },
      "getTasksByResponsible()": {
        "returns": {
          "_0": "Task[] memory - An array containing tasks assigned to the caller."
        }
      },
      "getTasksWithoutResponsible()": {
        "returns": {
          "_0": "Task[] memory - An array containing tasks without a responsible address."
        }
      },
      "getUserForAddress(address)": {
        "params": {
          "_addressUser": "- The address to be checked."
        },
        "returns": {
          "_0": "bool - True if the address is a user, false otherwise."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unlockAuditor(uint256)": {
        "params": {
          "_auditorID": "- The ID of the auditor to be unlocked."
        }
      },
      "verifiedTask(uint256,bool)": {
        "params": {
          "_taskCompletedID": "- The ID of the completed task to verify.",
          "_verified": "- Boolean indicating whether the task is verified."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptTask(uint256)": {
        "notice": "Allows a user to accept a task by assigning themselves as the responsible party. Ensures that the sender is not the admin, the task exists, the task has no assigned responsible, and the sender is not an auditor. If the sender is not already a user, assigns the user role to the sender and adds them to the users list. Updates the task to mark the sender as the responsible party."
      },
      "addAuditor(address)": {
        "notice": "Adds a new auditor to the system. Ensures the provided auditor address is valid and not already assigned as an admin, auditor, or user. Creates a new Auditor object and assigns the AUDITOR_ROLE to the given address. Increments the auditorID and emits an event to signal that a new auditor has been added."
      },
      "addUser(address)": {
        "notice": "Adds a new user to the system. Checks various conditions including whether the address is valid, if the sender has the required role, and if the address is not already assigned. If all conditions are met, grants the user role to the address and emits an event."
      },
      "blockAuditor(uint256)": {
        "notice": "Blocks an auditor by setting their block status to true and revoking their auditor role. Ensures the auditor exists by checking if their address is not the zero address. Updates the auditor's block status and revokes their AUDITOR_ROLE."
      },
      "completedTask(uint256,string)": {
        "notice": "Marks a task as completed by providing proof. Ensures the caller has the USER_ROLE and validates that the task exists and the proof is not empty. Checks if the task has already been completed; if not, it records the completion."
      },
      "createTask(string,string,string)": {
        "notice": "Creates a new task with the given name, description, and rules. Ensures the provided name, description, and rules are not empty and that a reward is provided. Stores the task in the tasks mapping with a unique taskID and initializes task properties. Emits a TaskAdded event to signal that a new task has been created."
      },
      "createTaskWithResponsible(string,string,string,address)": {
        "notice": "Creates a new task with the specified name, description, rules, and responsible address. Ensures the provided name, description, and rules are not empty. Validates that a reward is provided and that the responsible address is not an admin or auditor. Assigns the task to the responsible address, granting the user role if not already assigned. Emits events to signal the addition of the user (if new) and the task."
      },
      "getAllAuditors()": {
        "notice": "Retrieves a list of all auditors. Creates a new array with the length equal to the number of auditors (auditorID). Iterates over the auditors mapping to populate the array with auditor details. Returns the array of auditors."
      },
      "getAllTasks()": {
        "notice": "Retrieves a list of all tasks. Ensures the caller has either the default admin role or the auditor role. Creates a new array with the length equal to the number of tasks. Iterates over the tasks mapping to populate the array with task details."
      },
      "getAllUsers()": {
        "notice": "Retrieves a list of all user addresses. Creates a new array with the length equal to the current number of users (userID). Iterates over the users mapping to populate the array with user addresses. Returns the array of user addresses."
      },
      "getAuditorForAddress(address)": {
        "notice": "Checks if a given address is associated with an auditor. Iterates through the auditors mapping to see if the address matches any existing auditor addresses. Returns true if a match is found; otherwise, returns false."
      },
      "getCompletedTask(uint256)": {
        "notice": "Retrieves a completed task by its task ID. Iterates through the tasksCompleted mapping to find the task with the matching task ID. Returns the completed task if found, otherwise returns a default TaskCompleted object."
      },
      "getTask(uint256)": {
        "notice": "Retrieves the name and description of a task by its ID. Accesses the task from the tasks mapping using the provided task ID. Returns the task's name and description."
      },
      "getTasksByResponsible()": {
        "notice": "Retrieves all tasks assigned to the caller. Ensures the caller has the USER_ROLE and the sender address is not the zero address. Counts the number of tasks assigned to the caller. Creates an array to store these tasks. Iterates over the tasks mapping to populate the array with tasks assigned to the caller."
      },
      "getTasksWithoutResponsible()": {
        "notice": "Retrieves a list of tasks that do not have an assigned responsible address. Iterates through the tasks mapping to count the number of tasks without a responsible address. Creates an array to store these tasks. Populates the array with tasks that have no responsible address. Returns the array of tasks without a responsible address."
      },
      "getUserForAddress(address)": {
        "notice": "Checks if a given address is associated with any user. Validates that the provided address is not the zero address. Iterates through the user mapping to see if the address matches any existing user addresses. Returns true if a match is found; otherwise, returns false."
      },
      "unlockAuditor(uint256)": {
        "notice": "Unlocks an auditor by setting their block status to false and re-granting their auditor role. Ensures the auditor exists by checking if their address is not the zero address. Updates the auditor's block status and grants them the AUDITOR_ROLE again."
      },
      "verifiedTask(uint256,bool)": {
        "notice": "Verifies a completed task. Checks if the sender has either the default admin role or the auditor role. Ensures the proof is provided and the task exists. If verified, assigns the verifier and transfers the reward to the responsible. If not verified, releases the task for reassignment."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 462,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "taskID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 465,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "auditorID",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 468,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "userID",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 471,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "taskCompletedID",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 473,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "admin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 511,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "tasks",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Task)488_storage)"
      },
      {
        "astId": 516,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "auditors",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Auditor)495_storage)"
      },
      {
        "astId": 520,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "users",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 525,
        "contract": "contracts/TaskContract.sol:TaskContract",
        "label": "tasksCompleted",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(TaskCompleted)506_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Auditor)495_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TaskContract.Auditor)",
        "numberOfBytes": "32",
        "value": "t_struct(Auditor)495_storage"
      },
      "t_mapping(t_uint256,t_struct(Task)488_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TaskContract.Task)",
        "numberOfBytes": "32",
        "value": "t_struct(Task)488_storage"
      },
      "t_mapping(t_uint256,t_struct(TaskCompleted)506_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TaskContract.TaskCompleted)",
        "numberOfBytes": "32",
        "value": "t_struct(TaskCompleted)506_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Auditor)495_storage": {
        "encoding": "inplace",
        "label": "struct TaskContract.Auditor",
        "members": [
          {
            "astId": 490,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "auditorID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 492,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "auditorAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 494,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "block",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Task)488_storage": {
        "encoding": "inplace",
        "label": "struct TaskContract.Task",
        "members": [
          {
            "astId": 475,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "taskID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 477,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 479,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 481,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "rules",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 483,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "reward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 485,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "responsible",
            "offset": 0,
            "slot": "5",
            "type": "t_address_payable"
          },
          {
            "astId": 487,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "completed",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TaskCompleted)506_storage": {
        "encoding": "inplace",
        "label": "struct TaskContract.TaskCompleted",
        "members": [
          {
            "astId": 497,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "taskCompletedID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 499,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "taskID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 501,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "proof",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 503,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "verifier",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 505,
            "contract": "contracts/TaskContract.sol:TaskContract",
            "label": "verified",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}